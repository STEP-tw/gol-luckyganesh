{"version":3,"sources":["_src/gameOfLife.js","_src/gameOfLifeLib.js","Cell.js","App.js","serviceWorker.js","index.js"],"names":["require","generateBoard","findArray","newGeneration","placeAlives","findAliveCellLocation","getCoordinates","module","exports","nextGeneration","currentGeneration","bounds","topLeft","bottomRight","rows","columns","board","coordinates","newList","filter","x","map","sum","a","b","nextStateOfCell","totalAliveNeighbours","currentStateoOfCell","findNeighboursState","row","column","mainrow","leftrow","rightrow","cells","push","undefined","coordinate1","coordinate2","list","i","j","array","some","elem","createArray","length","filler","Array","fill","boardcoordinates","coordinateList","outerindex","innerindex","rowNo","stateOfElement","columnNo","noOfAlives","reduce","Cell","react_default","createElement","width","height","this","props","color","col","y","stroke","strokeWidth","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","gen","_this2","timerID","setInterval","tick","setState","colors","src_Cell","concat","genCells","forEach","cell","join","toColourLookup","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.03bf7d90.chunk.js","sourcesContent":["const { generateBoard , findArray ,newGeneration, placeAlives, findAliveCellLocation ,getCoordinates } = require(\"./gameOfLifeLib.js\");\n\nconst nextGeneration = function(currentGeneration,bounds){\n  let { topLeft , bottomRight } = bounds;\n  let rows = bottomRight[0] - topLeft[0] +1;\n  let columns = bottomRight[1] - topLeft[1] +1;\n  let board = generateBoard(rows,columns);\n  let coordinates = getCoordinates(topLeft,bottomRight);\n  let newList = currentGeneration.filter((x) => findArray(x,coordinates));\n  newList = newList.map((x) => [(x[0] - topLeft[0]),(x[1] - topLeft[1])]);\n  placeAlives(newList,board);\n  let result =findAliveCellLocation(newGeneration(board)).map((x) => {\n    return [(x[0] +topLeft[0]),(x[1] + topLeft[1])]\n  }); \n  return result; \n}\n\nmodule.exports = { nextGeneration };\n","const newGeneration = function(board){\n  let newBoard = board.map((row,rowNo) =>\n    row.map((stateOfElement,columnNo) => {\n      let noOfAlives = findNeighboursState(rowNo,columnNo,board).reduce(sum,0);\n      return nextStateOfCell(noOfAlives,stateOfElement);\n    }));\n  return newBoard;\n}\n\nconst sum = function(a,b){\n  return a+b;\n}\n\nconst findAliveCellLocation = function(board){\n  let coordinateList = [];\n  for(let outerindex = 0;outerindex<board.length;outerindex++){\n    for(let innerindex = 0;innerindex<board[outerindex].length;innerindex++){\n      if(board[outerindex][innerindex]){\n        coordinateList.push([outerindex,innerindex]);\n      }\n    }\n  }\n  return coordinateList;\n}\n\nconst nextStateOfCell = function(totalAliveNeighbours,currentStateoOfCell){\n  let result = [0,0,currentStateoOfCell,1,0,0,0,0,0]\n  return result[totalAliveNeighbours];\n}\n\nconst findBoardCells = function(board){\n  let newBoard = board.slice(0);\n  newBoard = newBoard.map((row,rowNo) => {\n    return row.map((column,columnNo) => {\n      return findNeighboursState(rowNo,columnNo,board)\n    });\n  });\n  return newBoard;\n}\n\nconst findNeighboursState = function(row,column,board){\n  let mainrow = board[row]\n  let leftrow = board[row-1] || [];\n  let rightrow = board[row+1] || [];\n  let cells = [ mainrow[column-1],mainrow[column+1]]\n  cells.push(leftrow[column])\n  cells.push(leftrow[column+1],leftrow[column-1])\n  cells.push(rightrow[column],rightrow[column+1],rightrow[column-1])\n  cells = cells.filter((x) => x != undefined)\n  return cells;\n}\n\nconst getCoordinates = function(coordinate1,coordinate2){\n  let list = [];\n  for(let i = coordinate1[0] ; i <= coordinate2[0] ; i++){\n    for(let j = coordinate1[1] ; j <= coordinate2[1] ; j++){\n      list.push([i,j]);\n    }\n  }\n  return list;\n}\n\nconst placeAlives = function(list,board){\n  let boardcoordinates = getCoordinates([0,0],[board.length-1,board[0].length-1])\n  let newlist = list.filter((x) => findArray(x,boardcoordinates));\n  newlist.map((x) => board[x[0]][x[1]] = 1)\n  return board;\n};\n\nconst findArray = function(array,list){\n  return list.some((elem) => {\n    return elem[0] == array[0] && elem[1] == array[1];\n  });\n}\n\nconst createArray = function(length,filler){\n  return new Array(length).fill(filler);\n}\n\nconst generateBoard = function(rows,columns){\n  return createArray(rows,rows).map((x) => createArray(columns,0));\n}\n\nmodule.exports = { \n  generateBoard ,\n  findArray ,\n  placeAlives,\n  findAliveCellLocation ,\n  getCoordinates ,\n  newGeneration\n};\n","import React, { Component } from 'react';\n\nclass Cell extends Component {\n  render() {\n    return <rect width=\"10\" \n    height=\"10\"\n    fill={this.props.color || \"white\"}\n    x={this.props.col*10} \n    y={this.props.row*10} \n    stroke=\"lightgray\" \n    strokeWidth={1}></rect>\n  }\n}\n\nexport default Cell;","import React, { Component } from 'react';\nimport Cell from './Cell';\nconst {nextGeneration} = require('./_src/gameOfLife.js');\n\nconst genId = (a) => a.join(\"_\");\n\nconst genCells = (colors) => {\n  let cells = [];\n  for(let i=0;i<17;i++) {\n    for(let j=0;j<17;j++) {\n      cells.push(<Cell row={i} col={j} color={colors[`${i}_${j}`]}/>);\n    }\n  }\n  return cells;\n}\n\nconst toColourLookup=(cells) => {\n  let colors={};\n  cells.forEach(cell => {\n    colors[genId(cell)]=\"black\"\n  });\n  return colors;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {gen: this.props.gen};\n  }\n  componentDidMount() {\n    this.timerID = setInterval(()=>this.tick(),180)\n  }\n  tick() {\n    this.setState((state,props)=>{\n      let newState=nextGeneration(state.gen,{topLeft:[0,0],bottomRight:[17,17]});\n      return {gen:newState};\n    });\n  }\n  render() {\n    let colors=toColourLookup(this.state.gen)\n    let cells=genCells(colors);\n    return (\n      <div className=\"App\">\n        <svg width={800} height={800}>\n          {cells}\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst coords=[ [ 1, 5 ],\n[ 1, 11 ],\n[ 2, 5 ],\n[ 2, 11 ],\n[ 3, 5 ],\n[ 3, 6 ],\n[ 3, 10 ],\n[ 3, 11 ],\n[ 5, 1 ],\n[ 5, 2 ],\n[ 5, 3 ],\n[ 5, 6 ],\n[ 5, 7 ],\n[ 5, 9 ],\n[ 5, 10 ],\n[ 5, 13 ],\n[ 5, 14 ],\n[ 5, 15 ],\n[ 6, 3 ],\n[ 6, 5 ],\n[ 6, 7 ],\n[ 6, 9 ],\n[ 6, 11 ],\n[ 6, 13 ],\n[ 7, 5 ],\n[ 7, 6 ],\n[ 7, 10 ],\n[ 7, 11 ],\n[ 9, 5 ],\n[ 9, 6 ],\n[ 9, 10 ],\n[ 9, 11 ],\n[ 10, 3 ],\n[ 10, 5 ],\n[ 10, 7 ],\n[ 10, 9 ],\n[ 10, 11 ],\n[ 10, 13 ],\n[ 11, 1 ],\n[ 11, 2 ],\n[ 11, 3 ],\n[ 11, 6 ],\n[ 11, 7 ],\n[ 11, 9 ],\n[ 11, 10 ],\n[ 11, 13 ],\n[ 11, 14 ],\n[ 11, 15 ],\n[ 13, 5 ],\n[ 13, 6 ],\n[ 13, 10 ],\n[ 13, 11 ],\n[ 14, 5 ],\n[ 14, 11 ],\n[ 15, 5 ],\n[ 15, 11 ] ];\nReactDOM.render(<App gen={coords}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}